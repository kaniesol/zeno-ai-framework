// Zeno AI: Distributed Data Sync and Verification Framework

/**
 * This module enables secure, decentralized data synchronization and verification across
 * multiple nodes in a blockchain network. It ensures consistency, minimizes conflicts, and
 * provides a robust mechanism for validating data integrity.
 */

// Dependencies
const crypto = require("crypto");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

// Configuration
const CONFIG = {
    nodes: [
        { name: "Node 1", url: "http://node1.blockchain.net/sync" },
        { name: "Node 2", url: "http://node2.blockchain.net/sync" },
        { name: "Node 3", url: "http://node3.blockchain.net/sync" },
    ],
    syncInterval: 60000, // Sync every 60 seconds
    dataDirectory: "./data",
    hashAlgorithm: "sha256",
    conflictResolution: "latest-timestamp",
};

// Ensure data directory exists
if (!fs.existsSync(CONFIG.dataDirectory)) {
    fs.mkdirSync(CONFIG.dataDirectory, { recursive: true });
}

// Utility Functions
function hashData(data) {
    return crypto.createHash(CONFIG.hashAlgorithm).update(data).digest("hex");
}

function saveDataToFile(fileName, data) {
    const filePath = path.join(CONFIG.dataDirectory, fileName);
    fs.writeFileSync(filePath, data);
    console.log(`Data saved to: ${filePath}`);
}

function loadDataFromFile(fileName) {
    const filePath = path.join(CONFIG.dataDirectory, fileName);
    if (fs.existsSync(filePath)) {
        return fs.readFileSync(filePath, "utf-8");
    } else {
        throw new Error(`File not found: ${fileName}`);
    }
}

// Node Sync Class
class NodeSync {
    constructor(node) {
        this.node = node;
    }

    async fetchData() {
        try {
            const response = await axios.get(this.node.url);
            console.log(`Fetched data from ${this.node.name}`);
            return response.data;
        } catch (error) {
            console.error(`Error fetching data from ${this.node.name}:`, error.message);
            throw error;
        }
    }

    async pushData(data) {
        try {
            await axios.post(this.node.url, data, { headers: { "Content-Type": "application/json" } });
            console.log(`Pushed data to ${this.node.name}`);
        } catch (error) {
            console.error(`Error pushing data to ${this.node.name}:`, error.message);
            throw error;
        }
    }
}

// Conflict Resolution
function resolveConflict(localData, remoteData) {
    const localTimestamp = new Date(localData.timestamp);
    const remoteTimestamp = new Date(remoteData.timestamp);

    if (CONFIG.conflictResolution === "latest-timestamp") {
        return localTimestamp > remoteTimestamp ? localData : remoteData;
    } else {
        throw new Error("Unsupported conflict resolution strategy");
    }
}

// Data Synchronization
async function synchronizeData() {
    console.log("Starting data synchronization...");

    for (const nodeConfig of CONFIG.nodes) {
        const node = new NodeSync(nodeConfig);

        try {
            const remoteData = await node.fetchData();
            const localFileName = `${nodeConfig.name.replace(/\s+/g, "_")}_data.json`;
            const localData = fs.existsSync(path.join(CONFIG.dataDirectory, localFileName))
                ? JSON.parse(loadDataFromFile(localFileName))
                : null;

            if (localData) {
                const resolvedData = resolveConflict(localData, remoteData);
                saveDataToFile(localFileName, JSON.stringify(resolvedData, null, 2));
            } else {
                saveDataToFile(localFileName, JSON.stringify(remoteData, null, 2));
            }

            console.log(`Data synchronized for ${nodeConfig.name}`);
        } catch (error) {
            console.error(`Error synchronizing data for ${nodeConfig.name}:`, error.message);
        }
    }

    console.log("Data synchronization complete.");
}

// Verification Class
class DataVerifier {
    constructor(fileName) {
        this.fileName = fileName;
    }

    verifyIntegrity(expectedHash) {
        const data = loadDataFromFile(this.fileName);
        const calculatedHash = hashData(data);

        if (calculatedHash === expectedHash) {
            console.log(`Integrity verified for ${this.fileName}`);
            return true;
        } else {
            console.error(`Integrity check failed for ${this.fileName}`);
            return false;
        }
    }
}

// Analytics on Sync
function syncAnalytics() {
    console.log("=== Sync Analytics ===");

    const files = fs.readdirSync(CONFIG.dataDirectory);
    for (const file of files) {
        const filePath = path.join(CONFIG.dataDirectory, file);
        const dataSize = fs.statSync(filePath).size;
        console.log(`File: ${file}, Size: ${dataSize} bytes`);
    }
}

// Main Workflow
async function main() {
    console.log("Starting Zeno Distributed Data Sync Framework...");

    // Step 1: Synchronize Data
    await synchronizeData();

    // Step 2: Perform Analytics
    syncAnalytics();

    // Step 3: Verify Data Integrity
    const verifier = new DataVerifier("Node_1_data.json");
    verifier.verifyIntegrity("expected_hash_here");
}

main().catch((err) => console.error("Error in workflow:", err.message));
