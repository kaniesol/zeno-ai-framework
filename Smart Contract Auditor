// Zeno AI: Smart Contract Auditor Framework

/**
 * This framework automates the process of auditing smart contracts for vulnerabilities,
 * ensuring security and compliance in decentralized applications.
 */

// Dependencies
const ethers = require("ethers");
const fs = require("fs");
const crypto = require("crypto");

// Configuration
const CONFIG = {
    contractsPath: "./contracts",
    auditReportsPath: "./audit_reports",
    knownVulnerabilities: [
        { id: "001", description: "Reentrancy Attack", pattern: /call\(.*\).value\(.*\)/g },
        { id: "002", description: "Unchecked External Call", pattern: /external.*function.*\{.*\}/g },
        { id: "003", description: "Integer Overflow/Underflow", pattern: /add\(.*\)\;|sub\(.*\)\;/g },
    ],
};

// Ensure directories exist
if (!fs.existsSync(CONFIG.contractsPath)) {
    fs.mkdirSync(CONFIG.contractsPath, { recursive: true });
}
if (!fs.existsSync(CONFIG.auditReportsPath)) {
    fs.mkdirSync(CONFIG.auditReportsPath, { recursive: true });
}

// Utility Functions
function generateReportFileName(contractName) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    return `${contractName}_audit_${timestamp}.json`;
}

function logMessage(message, type = "info") {
    const logTypes = { info: "[INFO]", error: "[ERROR]", warning: "[WARNING]" };
    console.log(`${logTypes[type] || "[INFO]"} ${message}`);
}

// Contract Auditor
class SmartContractAuditor {
    constructor(contractName, contractCode) {
        this.contractName = contractName;
        this.contractCode = contractCode;
        this.vulnerabilities = [];
    }

    analyze() {
        logMessage(`Starting analysis for ${this.contractName}`);

        CONFIG.knownVulnerabilities.forEach((vulnerability) => {
            const matches = [...this.contractCode.matchAll(vulnerability.pattern)];
            if (matches.length > 0) {
                this.vulnerabilities.push({
                    id: vulnerability.id,
                    description: vulnerability.description,
                    occurrences: matches.length,
                });
                logMessage(`Found ${matches.length} instances of ${vulnerability.description}`, "warning");
            }
        });

        logMessage(`Analysis complete for ${this.contractName}`);
    }

    generateReport() {
        const report = {
            contractName: this.contractName,
            timestamp: new Date().toISOString(),
            vulnerabilities: this.vulnerabilities,
        };

        const reportFileName = generateReportFileName(this.contractName);
        const reportFilePath = `${CONFIG.auditReportsPath}/${reportFileName}`;
        fs.writeFileSync(reportFilePath, JSON.stringify(report, null, 2));

        logMessage(`Audit report saved to ${reportFilePath}`);
        return reportFilePath;
    }

    hasCriticalIssues() {
        return this.vulnerabilities.length > 0;
    }
}

// Batch Auditing
function auditAllContracts() {
    const contractFiles = fs.readdirSync(CONFIG.contractsPath).filter((file) => file.endsWith(".sol"));
    if (contractFiles.length === 0) {
        logMessage("No contracts found for auditing.", "error");
        return;
    }

    contractFiles.forEach((file) => {
        const filePath = `${CONFIG.contractsPath}/${file}`;
        const contractCode = fs.readFileSync(filePath, "utf-8");
        const auditor = new SmartContractAuditor(file.replace(".sol", ""), contractCode);
        auditor.analyze();
        auditor.generateReport();

        if (auditor.hasCriticalIssues()) {
            logMessage(`Critical issues found in ${file}. Immediate attention required.`, "error");
        } else {
            logMessage(`${file} passed all checks.`, "info");
        }
    });
}

// Example Smart Contract Code (Replace this with actual contracts for real audits)
const exampleContract = `
pragma solidity ^0.8.0;

contract Example {
    function withdraw() public {
        msg.sender.call{value: address(this).balance}("");
    }

    function uncheckedAddition(uint256 a, uint256 b) public pure returns (uint256) {
        return a + b;
    }
}
`;

// Save Example Contract to Disk
const exampleFilePath = `${CONFIG.contractsPath}/Example.sol`;
fs.writeFileSync(exampleFilePath, exampleContract);
logMessage(`Example contract saved to ${exampleFilePath}`);

// Run Batch Audit
logMessage("Starting batch audit of all contracts...");
auditAllContracts();
